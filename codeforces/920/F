#include<bits/stdc++.h>
using namespace std;
#define sz 300005
#define szi 1000001
int fact[szi];
typedef long long int ll;
ll seg[4*sz][2],A[sz];
void build(int node,int st,int en){
	if(st==en) {
		seg[node][0]=A[st];
		seg[node][1]=A[st];
		return;
	}
	int mid=(st+en)>>1;
	build(2*node,st,mid);
	build(2*node+1,mid+1,en);
	seg[node][0]=max(seg[2*node][0],seg[2*node+1][0]);
	seg[node][1]=seg[2*node][1]+seg[2*node+1][1];
}
void upd(int node,int st,int en,int l,int r){
	if(seg[node][0]<=2) return;
	if(r<st or en<l) return;
	if(st==en){
		A[st]=fact[A[st]];
		seg[node][0]=A[st];
		seg[node][1]=A[st];
		return;
	}
	int mid=(st+en)>>1;
	if(seg[2*node][0]>2) upd(2*node,st,mid,l,r);
	if(seg[2*node+1][0]>2) upd(2*node+1,mid+1,en,l,r);
	
	seg[node][0]=max(seg[2*node][0],seg[2*node+1][0]);
	seg[node][1]=seg[2*node][1]+seg[2*node+1][1];
}
ll qry(int node,int st,int en,int l,int r){
	if(r<st or en<l) return 0;
	if(l<=st and en<=r) return seg[node][1];
	int mid=(st+en)>>1;
	return (ll)(qry(2*node,st,mid,l,r)+qry(2*node+1,mid+1,en,l,r));
}
int main(){
	 ios_base::sync_with_stdio(false);cin.tie(NULL); cout.tie(NULL);
	int n,q; cin>>n>>q;
	for(int i=1;i<=n;++i) cin>>A[i];
	for(int i=1;i<szi;++i)
	for(int j=i;j<szi;j+=i)
	fact[j]+=1;
	build(1,1,n);
	while(q--){
		int typ,x,y;cin>>typ>>x>>y;
		if(typ==1){
			upd(1,1,n,x,y);
		}
		else{
			cout<<qry(1,1,n,x,y)<<"\n";
		}
	}
	
	
	return 0;
}
