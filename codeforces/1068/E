#include<bits/stdc++.h>
using namespace std;
#define ll long long int 
#define sz 200005
vector<int>gr[sz],lv[sz]; int mx=0,id;
int par[sz];
void dfs(int src,int par,int level){
	
	if(level>mx){
		mx=level;
		id=src;
	}
	
	for(int i=0;i<(int)gr[src].size();++i){
		int ver=gr[src][i];
		if(ver==par) continue;
		dfs(ver,src,level+1);
	}
	
}
void adfs(int src,int parent,int level){
	if(level>mx){
		mx=level;
		id=src;
	}
	par[src]=parent;
	for(int i=0;i<(int)gr[src].size();++i){
		int ver=gr[src][i];
		if(ver==parent) continue;
		adfs(ver,src,level+1);
	}
}

int bdfs(int src,int parent,int k){
	
	if(k==0){
		if((int)gr[src].size()!=1) return 0;
		return 1;
	}
	else {
		if((int )gr[src].size()<=3 and parent!=0) return 0;
		if((int)gr[src].size()<3 and parent==0) return 0;
		
	}
	int ret=1;
	for(int i=0;i<(int)gr[src].size();++i){
		int ver=gr[src][i];
		if(ver==parent) continue;
		ret&=bdfs(ver,src,k-1);
	}
	return ret;
}

int main(){
	
	int n;ll k;cin>>n>>k;
	for(int i=0,x,y;i<n-1;++i){
		cin>>x>>y;
		gr[x].push_back(y);
		gr[y].push_back(x);
	}
	
	dfs(1,0,1);
	mx=0;int id1=id; id=0;
//	cout<<" leaf "<<id1<<endl;
	adfs(id1,0,1);
	
	vector<int>path;
//	cout<<" comes "<<id<<endl;
	while(id!=0){
		path.push_back(id);
		id=par[id];
	}
	int szi=(int)path.size();
	int mid=szi/2;
	
//	cout<<" middle "<<path[mid]<<endl;


	
	if(bdfs(path[mid],0,k)) cout<<"Yes\n";
	else cout<<"No";
	
	return 0;
}
