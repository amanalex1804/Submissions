#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define SZ 400005
 
vector<int>gr[SZ];
int s[SZ],e[SZ],black[SZ],tim = 1;ll seg[4*SZ],lazy[4*SZ];
ll val[SZ],cur[SZ];
 
void dfs(int src,int par){
	s[src] = tim++;
	
	for(int i=0;i<(int)gr[src].size();++i){
		int ver = gr[src][i];
		if(ver!=par) dfs(ver,src);
	}
	
	e[src] = tim++;
}
 
void upd(int node,int st,int en,int l,int r,ll v){
	if(lazy[node]){
		seg[node]+=lazy[node];
		if(st!=en){
			lazy[2*node]+=lazy[node];
			lazy[2*node+1]+=lazy[node];
		}
		lazy[node] = 0;
	}
	
	if(st>en or r<st or en<l) return;
	if(l<=st and en<=r){
		seg[node]+=v;
		if(st!=en){
			lazy[2*node]+=v;
			lazy[2*node+1]+=v;			
		}
		return;
	}
	int mid = (st+en)/2;
    upd(2*node,st,mid,l,r,v);
    upd(2*node+1,mid+1,en,l,r,v);
}
 
ll qry(int node,int st,int en,int l,int r){
	if(lazy[node]){
		seg[node]+=lazy[node];
		if(st!=en){
			lazy[2*node]+=lazy[node];
			lazy[2*node+1]+=lazy[node];
		}
		lazy[node] = 0;
	}
	
	if(st>en or r<st or en<l) return 0;
	
	if(l<=st and en<=r) return seg[node];
	int mid = (st+en)/2;
	ll x = qry(2*node,st,mid,l,r);
	ll y = qry(2*node+1,mid+1,en,l,r);
	return (ll)(x+y);
	
}
 
int main(){
	 ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	int n;cin>>n;
	for(int i=0,x,y;i<n-1;++i){
		cin>>x>>y;
		gr[x].push_back(y);
		gr[y].push_back(x);
	}
	
	dfs(1,0);
	--tim;
	for(int i=1;i<=n;++i) cin>>val[i];
	
	int q;cin>>q;
	while(q--){
		int typ; cin>>typ;
		if(typ==1){
			int a; ll b;cin>>a>>b;
			upd(1,1,tim,s[a],e[a],b);
		}else if(typ==2){
			int a;ll b;cin>>a>>b;
			if(!black[a]) val[a]+= b; 
			
		}else if(typ==3){
			int a;cin>>a;
			black[a]^=1;	
			ll x = qry(1,1,tim,s[a],s[a]);
			if(!black[a]){
				cur[a] = cur[a] - x;
			}else{
				cur[a] = x+cur[a];
			}
			
		}else{
			int a;cin>>a;
			ll ans = val[a]+cur[a];
			if(!black[a]) ans+=qry(1,1,tim,s[a],s[a]);
			cout<<ans<<"\n";
		}
	}
	
	
	
	
	
	
	
	return 0;
}
