#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef  pair<int,int>P;
typedef pair<int,pair<int,int> >P1;
typedef pair<pair<int,int>,pair<int,int> >P11;


#define rep(xx,uu,ee) for(xx=uu;xx<ee;++xx)
#define mm(xx) memset(xx,0,sizeof(xx))
#define F first
#define S second
#define SF second.first
#define SS second.second
#define FF first.first
#define FS first.second
#define pb push_back

#define SYNC ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define scd(xx) scanf("%d",&xx)
#define scd2(xx,uu) scanf("%d%d",&xx,&uu)
#define debug2d(xx,rr,cc) for(int i=0;i<rr;++i) {for(int j=0;j<cc;++j) cout<<xx[i][j]<<" "; cout<<endl;}
#define debug1d(xx,rr) for(int i=0;i<rr;++i) cout<<xx[i]<<" ";
#define rep(xx,uu,ee) for(xx=uu;xx<ee;++xx)
#define rept(xx) for(int uu=0;uu<xx;++uu)
#define repb(xx,uu,ee) for(xx=uu;xx>=ee;--xx)

//  int dx[]={1,0,-1,0};int dy[]={0,1,0,-1};                           //4 directions
//  int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};      //8 directions
//  int dx[]={2,1,-1,-2,-2,-1,1,2}; int dy[]={1,2,2,1,-1,-2,-2,-1};       //knight's move
//  int dx[]={-1,-1,0,1,1,1,0}; int dy[]={-1,1,2,1,-1,-2};                //hexagonally move
// pos=lower_bound(v.begin(), v.end(), data) - v.begin();                  // binary search position(index =0)

#define SIZ 4000001
#define SIZ1 1000000
#define INF 999999

#define T int t;for(scanf("%d",&t);t--;)
#define mod 1000000007
#define scl(xx) scanf("%lld",&xx)
#define pra(xx) printf("%d ",xx)
#define prs(xx) printf("xx\n")
#define bs(XX,xx) binary_search(XX.begin(), XX.end(),xx)
int seg[SIZ],lazy[SIZ],cnt[SIZ],l,r,m;
void update(int node,int st,int en)
{
if(lazy[node])
{
seg[node]+=(en-st+1)*lazy[node];
if(st!=en)
{
lazy[2*node]+=lazy[node];
lazy[2*node+1]+=lazy[node];
}
lazy[node]=0;
}
if(st>en or r<st or en<l) return;
if(l<=st and en<=r)
{
seg[node]+=(en-st+1);
if(st!=en)
{
lazy[2*node]+=1;
lazy[2*node+1]+=1;
}
return;
}
int mid=st+(en-st)/2;
update(2*node,st,mid);
update(2*node+1,mid+1,en);


}
void count(int node,int st,int en)
{

if(lazy[node])
{
seg[node]+=(en-st+1)*lazy[node];
if(st!=en)
{
lazy[2*node]+=lazy[node];
lazy[2*node+1]+=lazy[node];
}
lazy[node]=0;
}
if(st!=en)
{
int mid=st+(en-st)/2;
count(2*node,st,mid);
count(2*node+1,mid+1,en);

}
else {++cnt[seg[node]];m=max(m,seg[node]);}
}
int main()
{
int n,q,i;
scd(n);scd(q);
while(q--)
{
scd2(l,r);
update(1,1,n);
}
m=-1;
count(1,1,n);
//rep(i,0,10) cout<<cnt[i]<<" ";
//cout<<endl;
for(i=m-1;i>=0;i--)
cnt[i]+=cnt[i+1];

scd(q);
while(q--)
{
scd(l);
cout<<cnt[l]<<endl;


}





    return 0;
}










/*
A million dollar is'nt cool!
A billion dollar is.

*/
