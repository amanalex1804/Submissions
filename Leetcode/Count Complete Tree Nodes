/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getHt(TreeNode* root) {
        int ht = 0;
        while(root) {
            ++ht;
            root=root->left;
        }
        return ht;
    }
    int countNodes(TreeNode* root) {
        int ans = 0, currHt=0;
        if(!root) {
            return 0;
        }
        int ht = getHt(root);
        
        queue<TreeNode* >q;
        q.push(root);
        
       // cout<<ht<<endl;
        while(!q.empty()) {
            int sz = (int)q.size();
            ++currHt;
            for(int i=0;i<sz;++i) {
                TreeNode* tmp = q.front();
                q.pop();
                ++ans;
                if(tmp->left) {
                    if(currHt==ht-1) {
                        ++ans;
                    } else{
                        q.push(tmp->left);
                    }
                }
                               
              if(tmp->right) {
                    if(currHt==ht-1) {
                        ++ans;
                    } else{
                        q.push(tmp->right);
                    }
                }
            }
        }
        
        return ans;
    }
};
