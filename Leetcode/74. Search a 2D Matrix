class Solution {
public:

// The reason for converting the 1D index back to 2D coordinates using `mid / cols` for the row index and `mid % cols` for the column index is to map the linear index `mid` back to the corresponding element in the 2D matrix.

// In the binary search algorithm, we treat the 2D matrix as a single sorted array. The linear index `mid` represents an index in this 1D array. However, to locate the element in the original 2D matrix, we need to convert this linear index back to its corresponding row and column indices.

// For example, consider a 3x4 matrix:

// ```
// 1  3  5  7
// 10 11 16 20
// 23 30 34 60
// ```

// If we flatten this matrix into a 1D array, it would look like `[1, 3, 5, 7, 10, 11, 16, 20, 23, 30, 34, 60]`. Now, if we want to find the index of `16`, which is at row `1` and column `2`, in the flattened array, we would use the formula `row * cols + col`, where `row = 1` and `col = 2`. So, `1 * 4 + 2 = 6`, which is the index of `16` in the flattened array.

// Conversely, to find the row and column indices given the index in the flattened array, we use the formulas `row = mid / cols` and `col = mid % cols`. This way, we can map between the linear index and the corresponding 2D coordinates in the matrix.

    bool searchMatrix(vector<vector<int>>& matrix, int target) {

       int row = (int)matrix.size();
       int col = (int)matrix[0].size();

       int low = 0, high = (row*col)-1, mid =0;

       while(low<=high){
           mid = low + (high-low)/2;
           int val = matrix[mid/col][mid%col];
           if(val==target) return true;
           if(val<target){
               low = mid + 1;
           } else{
               high = mid - 1;
           }
       }
       return false;

    }
};
