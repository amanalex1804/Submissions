class Solution {
public:
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {

        priority_queue<int>fuels;
        int curr = startFuel, cnt = 0;
        int lastS = 0;
        for(int i=0;i<(int)stations.size();++i) {
            vector<int>data = stations[i];
            
            curr-=(data[0]-lastS);
            
            while(curr<0 and !fuels.empty()) {
                curr+=fuels.top();
                fuels.pop();
                ++cnt;
            }

            if(curr<0) {
                return -1;
            } 

            if(data[0]+curr>=target) {
                    return cnt;
            }
            
             fuels.push(data[1]);
             lastS = data[0];
        }


      int last = lastS;
   


        while(!fuels.empty() and curr+last<target) {
            
            curr+=fuels.top(); fuels.pop();
            cout<<"why "<<curr<<" "<<curr+last<<" "<<target<<endl;
            ++cnt;
        }

        if(curr+last<target) {
            return -1;
        } else {
            return cnt;
        }

        
    }
};
