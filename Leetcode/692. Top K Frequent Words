class Solution {
public:

// struct Node {
//     int leaf = 0;
//     Node* child[26];
// };

// Node* createNode(int val) {
//     Node* newNode = new Node();
//     for(int i=0;i<26;++i) {
//         newNode->child[i] = NULL;
//     }
//     newNode->leaf = 0;
//     return newNode;
// }
// Node* root;

// void insert(string s) {
//     Node* curr = root;
//     for(int i=0;i<(int)s.size();++i) {
//         int val = s[i]-'a';
//         if(curr->child[val]==NULL) {
//             curr->child[val]=createNode(val);
//         }
//         curr = curr->child[val];
//     }
//     curr->leaf+=1;
// }

unordered_map<string,int> freq;
typedef pair<string,int> pp;

static bool compareByFreq(const pp &p1, const pp &p2) {
    
    if(p1.second>p2.second) {
        return true;
    }

    if(p1.second==p2.second) {
        return p1.first<p2.first;
    }

    return false;
}

    vector<string> topKFrequent(vector<string>& words, int k) {
  
        for(int i=0;i<words.size();++i) {
            freq[words[i]]+=1;
        }
        vector<pp>v;

        for(auto it=freq.begin(); it!=freq.end(); ++it) {
            v.push_back({it->first, it->second});
        }

 
        sort(v.begin(), v.end(), compareByFreq);
                vector<string> ans;


         for(int i=0;i<(int)v.size() and i<k;++i) {
            ans.push_back(v[i].first);
        }


        return ans;


        
    }
};
