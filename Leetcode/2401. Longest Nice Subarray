class Solution {
public:
    typedef long long int ll;
    vector<ll>pow2;
    void init() {
        pow2.push_back(1);
        for(int i=0;i<30;++i) {
            pow2.push_back(2*pow2.back());
        }
    }

    vector<int> getBit(int n) {
        vector<int>ans;
        for(int i=0;i<=30;++i) {
            int bit = (n&pow2[i])>0 ? 1 :0;
            ans.push_back(bit);
        }
        return ans;
    }

    bool isCollid(int n, vector<int>&bits) { 
        vector<int>bits_n = getBit(n);
        for(int i=0;i<=30;++i) {
            if(bits[i]==1 and bits[i]==bits_n[i]) {
                return true;
            }
        }
        return false;
    }

    vector<int> addBits(int n, vector<int>&bits) {
        vector<int>bits_n = getBit(n);
        for(int i=0;i<30;++i) {
            if(bits_n[i]==1) {
                bits[i] = 1;
            }
        }
        return bits;
    }

    vector<int> removBits(int n, vector<int>&bits) {
        vector<int>bits_n = getBit(n);
        for(int i=0;i<30;++i) {
            if(bits_n[i]==1) {
                bits[i] = 0;
            }
        }
        return bits;
    }

    void printF(vector<int>b) {
        cout<<" --DUDE --\n";
        for(int i=0;i<(int)b.size();++i) cout<<b[i]<<" ";

        cout<<endl;
    }


    int longestNiceSubarray(vector<int>& nums) {

       init();
        vector<int>bits;
        for(int i=0;i<=30;++i) bits.push_back(0);
        int l = (int)nums.size(), i=0,j=0, ans = 1;


        while(i<l) {

            while(j<l and !isCollid(nums[j], bits)) {
                bits = addBits(nums[j], bits);
                ++j;
            }
            ans= max(ans, j-i);
            bits = removBits(nums[i++], bits);
        }
        return ans;


        
    }
};
