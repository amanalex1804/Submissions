/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    vector<TreeNode*> generateTrees(int n) {

        return generate(1,n);
    }

    vector<TreeNode*> generate(int left, int right){
        vector<TreeNode*>ans;
        if(left>right){
            ans.push_back(nullptr);
            return ans;
        }

        for(int i=left;i<=right;++i){
            vector<TreeNode*> leftSub = generate(left, i-1);
            vector<TreeNode*> rightSub = generate(i+1, right);
            for(int l=0;l<(int)leftSub.size();++l){
                for(int r=0;r<(int)rightSub.size();++r){
                    TreeNode* leftS = leftSub[l];
                    TreeNode* rightS = rightSub[r];
                         TreeNode* tmp = new TreeNode(i);
                         tmp->left = leftS;
                         tmp->right = rightS;
                         ans.push_back(tmp); 
                }
            }
        }
        return ans;
    }
};
