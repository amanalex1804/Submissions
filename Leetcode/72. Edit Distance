class Solution {
public:

    int fn(int i, int j, string &s1, string& s2, int **dp) {
        if(i>=(int)s1.size()){
            return (int)s2.size() - j;
        }
        if(j>=(int)s2.size()){
            return (int)s1.size() - i;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int val1 = INT_MAX, val2 = INT_MAX, val3 = INT_MAX, val4 = INT_MAX;

        if(s1[i] == s2[j]){
            val1 = fn(i+1, j+1, s1, s2, dp);
        } 

            val2 = 1 + fn(i+1, j+1, s1, s2, dp); // replace
            val3 = 1 + fn(i+1, j, s1, s2, dp);  // delete
            val4 = 1 + fn(i, j+1, s1, s2, dp);
        
        return dp[i][j] = min(min(val1, val4), min(val3, val2));
    }
    int minDistance(string word1, string word2) {

        int l1 = (int) word1.size(), l2 = (int)word2.size();

        int **dp = new int*[l1+1];
        for(int i=0;i<=l1;++i){
            dp[i] = new int[l2+1];
        }
        
        for(int i=0;i<=l1;++i){
            for(int j=0;j<=l2;++j){
                dp[i][j] = -1;
            }
        }

        return fn(0, 0, word1, word2, dp);
    }
};
