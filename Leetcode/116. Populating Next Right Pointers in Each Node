/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {

        if(!root){
            return root;
        }

        queue<Node*>q;
        q.push(root);
        Node* prev;
        while(!q.empty()){
            int cnt = q.size();
            prev = NULL;
            while(cnt>0){
                Node* tmp = q.front();
                if(!prev){
                    prev = tmp;
                } else {
                    prev->next = tmp;
                    prev = tmp;
                }
                prev->next = NULL;

             
                if(tmp->left) q.push(tmp->left);
                if(tmp->right) q.push(tmp->right);
                q.pop();
                --cnt;
            }
            
        }
        return root;
        
    }
};
