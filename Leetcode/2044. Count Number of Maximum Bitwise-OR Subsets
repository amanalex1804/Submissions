class Solution {

    public int fn(int idx, int bitValue, int []nums, int l, int mxVal){

        if(idx>=l) {

            if(mxVal==bitValue) {
                return 1;
            }
            return 0;
        }


        // if(dp[idx][bitValue]!=-1) {
        //     return dp[idx][bitValue];
        // }

        int take = fn(idx+1, bitValue | nums[idx], nums, l, mxVal);
        int notTake = fn(idx+1, bitValue,  nums, l, mxVal);

      //  dp[idx][bitValue]= take + notTake;

        return take+notTake;

    }
    public int countMaxOrSubsets(int[] nums) {

        int orVal = 0, l = (int)nums.length;

        for(int i=0;i<l;++i) {
            orVal = orVal | nums[i];
        }

        // int dp[][] = new int[l][orVal+1];

        // for(int i=0;i<l;++i)
        // for(int j=0;j<=orVal;++j)
        // dp[i][j] = -1;

        return fn(0, 0, nums, l, orVal);
        
    }
}
