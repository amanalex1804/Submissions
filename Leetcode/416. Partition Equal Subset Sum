class Solution {
public:
    int tot = 0;
    bool fn (int idx, int left, int **dp, vector<int>& A) {
        if(left<0 or left<(tot/2)-2){
            return false;
        }
        if(idx>=(int)A.size()){
            if(left == (tot-left)){
                return true;
            }
            return false;
        }
        if(dp[idx][left]!=-1){
            return dp[idx][left]==1;
        }

        bool v1 = fn(idx+1, left-A[idx], dp, A); //pick and move
        bool v2 = fn(idx+1, left, dp, A); // do not pick and move

        dp[idx][left] = (v1|v2)?1:0;
        return (v1|v2);
    }
    bool canPartition(vector<int>& nums) {

        tot = 0;
        int l = (int)nums.size();
        for(int i=0;i<l;++i) { 
            tot+= nums[i];
        }

        int **dp = new int* [l+1];
        for(int i=0;i<=l;++i) dp[i] = new int[tot+1];

        for(int i=0;i<=l;++i)
        for(int j=0;j<=tot;++j)
        dp[i][j] = -1;

        return fn(0, tot, dp, nums);
        
    }
};
