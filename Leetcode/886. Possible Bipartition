class Solution {
public:

    bool flag = true;

    void isGraphColor(int src, int par, int col, int *color, vector<vector<int> > &graph) {
        color[src] = col;
        int nextColor = (1^col);
        for(int i=0;i<(int)graph[src].size();++i) {
            int node = graph[src][i];
            if(node!=par) {
                if(color[node]==-1) {
                    isGraphColor(node, src, nextColor, color, graph);
                } else {
                    if(color[node]!=nextColor) {
                        flag = false;
                    }
                }
            }
        }

    }
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        vector<vector<int> >graph(n+1);
        flag = true;

        int* color = new int[n+1];
        for(int i=1;i<=n;++i) color[i] = -1;

        for(int i=0;i<(int)dislikes.size();++i) {
            int node1 = dislikes[i][0];
            int node2 = dislikes[i][1];
            graph[node1].push_back(node2);
            graph[node2].push_back(node1);
        }

        for(int i=1;i<=n;++i) {
            if(color[i]==-1) {
              isGraphColor(i, -1, 0, color, graph);

            }
        }

        return flag;

    }
};
