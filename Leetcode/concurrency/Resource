==== Basic ====


https://www.youtube.com/watch?v=S5sZx2bOV-0&list=PL5AvXwmzg5S1DrsLiTH2HLnim0fiKXcQC&index=1

https://algo.monster/liteproblems/1116

===== Semaphore syntax ====


In C++, semaphores are typically used in conjunction with the POSIX semaphore API, which provides functions for semaphore initialization, operations, and destruction. Hereâ€™s a step-by-step guide to using semaphores in C++:

### Step-by-Step Guide to Semaphore Usage in C++:

#### 1. Include Headers:
```cpp
#include <semaphore.h>
#include <pthread.h>  // For pthread_create(), pthread_join()
#include <iostream>
#include <thread>
#include <chrono>
#include <unistd.h>   // For sleep() (optional)
```

#### 2. Declare and Initialize a Semaphore:
```cpp
sem_t semaphore;

int main() {
    // Initialize the semaphore with an initial value
    sem_init(&semaphore, 0, 1);  // Initial value of 1 (binary semaphore)
    
    // Use the semaphore...
    
    // Destroy the semaphore when done
    sem_destroy(&semaphore);

    return 0;
}
```

- **`sem_init()` Function**:
  - `sem_init(&semaphore, 0, 1);`
    - Initializes the semaphore `semaphore`.
    - `0`: Indicates that the semaphore is shared between threads of the same process (not between processes).
    - `1`: Initial value of the semaphore (number of available resources). For a binary semaphore, this is typically `1`.

#### 3. Semaphore Operations:

##### Wait Operation (`sem_wait()`):
```cpp
void thread_func() {
    // Wait on the semaphore (decrement it)
    sem_wait(&semaphore);
    
    // Critical section: Access shared resource
    std::cout << "Thread entered critical section" << std::endl;
    
    // Simulate some work
    std::this_thread::sleep_for(std::chrono::seconds(1));
    
    // Release the semaphore (increment it)
    sem_post(&semaphore);
}
```

- **`sem_wait()` Function**:
  - `sem_wait(&semaphore);`
    - Waits on the semaphore (`semaphore`). If the semaphore value is greater than zero, it decrements the value and continues. If the value is zero, the thread blocks until the semaphore value becomes greater than zero.

##### Post Operation (`sem_post()`):
```cpp
void thread_func() {
    // Wait on the semaphore (decrement it)
    sem_wait(&semaphore);
    
    // Critical section: Access shared resource
    std::cout << "Thread entered critical section" << std::endl;
    
    // Simulate some work
    std::this_thread::sleep_for(std::chrono::seconds(1));
    
    // Release the semaphore (increment it)
    sem_post(&semaphore);
}
```

- **`sem_post()` Function**:
  - `sem_post(&semaphore);`
    - Increments the semaphore (`semaphore`), signaling that a previously-waiting thread can proceed (if any).

#### 4. Complete Example Using Threads:

```cpp
#include <semaphore.h>
#include <pthread.h>
#include <iostream>
#include <thread>
#include <chrono>
#include <unistd.h>

sem_t semaphore;

void thread_func() {
    // Wait on the semaphore (decrement it)
    sem_wait(&semaphore);
    
    // Critical section: Access shared resource
    std::cout << "Thread entered critical section" << std::endl;
    
    // Simulate some work
    std::this_thread::sleep_for(std::chrono::seconds(1));
    
    // Release the semaphore (increment it)
    sem_post(&semaphore);
}

int main() {
    // Initialize the semaphore with an initial value
    sem_init(&semaphore, 0, 1);  // Initial value of 1 (binary semaphore)
    
    // Create multiple threads
    std::thread t1(thread_func);
    std::thread t2(thread_func);
    std::thread t3(thread_func);
    
    // Join threads with the main thread
    t1.join();
    t2.join();
    t3.join();
    
    // Destroy the semaphore when done
    sem_destroy(&semaphore);

    return 0;
}
```

### Explanation:

- **Initialization (`sem_init()`)**:
  - Initializes the semaphore (`semaphore`) with an initial value (`1` in this case). This initializes it as a binary semaphore, which typically controls access to a single resource or critical section.

- **Semaphore Operations**:
  - **`sem_wait()`**: Decrements the semaphore value and waits if the value is zero (blocks the thread).
  - **`sem_post()`**: Increments the semaphore value and wakes up a waiting thread if any.

- **Thread Example**:
  - `thread_func()` represents the function executed by each thread. It demonstrates how threads can enter a critical section (protected by the semaphore) one at a time.

- **Thread Creation and Joining**:
  - Multiple threads (`t1`, `t2`, `t3`) are created to execute `thread_func()`.
  - `join()` ensures that the main thread waits for all threads to complete before proceeding to destroy the semaphore.

- **Cleanup (`sem_destroy()`)**:
  - `sem_destroy(&semaphore);` releases resources associated with the semaphore after it's no longer needed.

This example illustrates basic usage of semaphores in C++ for thread synchronization and resource sharing. Adjust the initial value and usage patterns of the semaphore according to your specific concurrency requirements.
