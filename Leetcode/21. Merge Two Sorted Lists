/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        ListNode* head = NULL;
        ListNode* list3 = NULL;

        while(list1!=NULL and list2!=NULL){
            ListNode* curr = new ListNode();
            if(list1->val<list2->val){
                curr->val = list1->val;
                list1 = list1->next;
            }else{
                curr->val = list2->val;
                list2 = list2->next;
            }

            if(head==NULL){
                head = curr;
                list3 = curr;
            }else{
                list3->next = curr;
                list3 = curr;
            }
        }

        while(list1!=NULL){
            ListNode* curr = new ListNode();
            curr->val = list1->val;
            list1 = list1->next;
            if(head==NULL){
                head = curr;
                list3 = curr;
            }else{
                list3->next = curr;
                list3 = curr;
            }
        }


        while(list2!=NULL){
            ListNode* curr = new ListNode();
            curr->val = list2->val;
            list2 = list2->next;
            if(head==NULL){
                head = curr;
                list3 = curr;
            }else{
                list3->next = curr;
                list3 = curr;
            }
        }
        return head;
    }
};
