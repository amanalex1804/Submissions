/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* genT(int i, int j, vector<int>&v){
        if(i>j){
            return NULL;
        }
        int mid = (i+j)/2;
        TreeNode* left = genT(i, mid-1, v);
        TreeNode* right = genT(mid+1, j, v);
        TreeNode* root = new TreeNode(v[mid]);
        root->left= left;
        root->right = right;
        return root;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        if(!head) {
            return NULL;
        }
        int count = 0;
        ListNode* curr = head;
        vector<int>v;
        while(curr!=NULL){
            cout<<curr->val<<" ";
            v.push_back(curr->val);
            curr = curr->next;
        }

        int l = (int)v.size();
        return genT(0, l-1, v);

        
    }
};
