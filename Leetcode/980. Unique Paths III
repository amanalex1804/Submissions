class Solution {
public:
    int row, col, tot=0;
    int dx[4] = {-1, 1, 0, 0};
    int dy[4] = {0, 0, -1, 1};
    pair<int,int> dest;
    bool vis[25][25];
    bool isInside(int x, int y) {
        if(0<=x and x<row and 0<=y and y<col) {
            return true;
        }
        return false;
    }

    int fn(int i, int j, int cnt, vector<vector<int> >&grid) {

        if(grid[i][j]==2) {
            return cnt==tot;
        }

        if(i>=row or j>=col or i<0 or j<0) {
            return 0;
        }

        if(grid[i][j]==-1) {
            return 0;
        }

        // int val = grid[i][j];
        // grid[i][j] = -1;

        int ans = 0;
        for(int idx=0;idx<4;++idx) {        
            int x = i + dx[idx];
            int y = j + dy[idx];
            if(isInside(x, y) and vis[x][y]==false) {
                vis[x][y] = true;
                ans+= fn(x, y, cnt+1, grid);
                 vis[x][y] = false;
            }
        }
     //   grid[i][j] = val;
        return ans;

    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        row = (int)grid.size();
        col = (int)grid[0].size();

        pair<int,int>src;
        for(int i=0;i<row;++i) {
            for(int j=0;j<col;++j) {
                if(grid[i][j]==1) {
                    src = {i,j};
                }
                if(grid[i][j]!=-1) {
                    tot++;
                }
            }
        }

        vis[src.first][src.second] = true;
        return fn(src.first, src.second, 1, grid);

    }
};
