#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;
typedef  pair<int,int>P;

#define mm(xx) memset(xx,0,sizeof(xx))
#define pb push_back

#define scd(xx) scanf("%d",&xx)
#define scl(xx) scanf("%lld",&xx)
#define scl2(xx,uu) scanf("%lld%lld",&xx,&uu);
#define scd2(xx,uu) scanf("%d%d",&xx,&uu)
#define rep(xx,uu,ee) for(xx=uu;xx<ee;++xx)

//  int dx[]={1,0,-1,0};int dy[]={0,1,0,-1};                           //4 directions
//  int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};      //8 directions
//  int dx[]={2,1,-1,-2,-2,-1,1,2}; int dy[]={1,2,2,1,-1,-2,-2,-1};       //knight's move

#define SIZ 100005
#define INF 999999
#define T int t;for(scanf("%d",&t);t--;)
#define mod 1000000007

vector<int>gr[SIZ];
vector<int>leaf;
int vis[SIZ],tree[SIZ],c=0;
inline int fact(int n)
{
	int i,ans=0;
	
	for(i=2;i<=n;++i)
	{
		if(n%i==0)
		{
			++ans;
			while(n%i==0)
			{
				
				n/=i;
			}
		}
		
	}
	return ans;
	
	
}

inline int dfs(int src)
{
	int i,v,d;
	vis[src]=1;
	for(i=0;i<gr[src].size();++i)
	{
	     if(!vis[gr[src][i]])
		 tree[src]+=dfs(gr[src][i]);   	
		
	}
	
return tree[src];	
}
int main()
{
	int n,i,u,v,d;
scd(n);
rep(i,1,n)
{
scd(d);scd2(u,v);
gr[v].pb(u);	
gr[u].pb(v);
if(d==1)
{
tree[u]=1;
tree[v]=1;
}	
}
tree[1]=dfs(1);
int ans=0;
rep(i,1,n+1) 
if(tree[i]==1)
++ans;

cout<<fact(ans);


	return 0;
}
