
/* This function is used to detect a cycle in undirected graph
*  adj[]: array of vectors to represent graph
*  V: number of vertices
*/
bool isCyclicUtil(vector<int>adj[],int v, bool visited[], int parent) 
{ 
    // Mark the current node as visited 
    visited[v] = true; 
  
    // Recur for all the vertices adjacent to this vertex 
   // list<int>::iterator i; 
    for (int i = 0; i <(int)adj[v].size(); ++i) 
    { 
        int x = adj[v][i];
        // If an adjacent is not visited, then recur for that adjacent 
        if (!visited[x]) 
        { 
           if (isCyclicUtil(adj,x, visited, v)) 
              return true; 
        } 
  
        // If an adjacent is visited and not parent of current vertex, 
        // then there is a cycle. 
        else if (x != parent) 
           return true; 
    } 
    return false; 
} 
bool isCyclic(vector<int> adj[], int V)
{
   bool *visited = new bool[V]; 
    for (int i = 0; i < V; i++) 
        visited[i] = false; 
  
    // Call the recursive helper function to detect cycle in different 
    // DFS trees 
    for (int u = 0; u < V; u++) 
        if (!visited[u]) // Don't recur for u if it is already visited 
          if (isCyclicUtil(adj,u, visited, -1)) 
             return true; 
  
    return false;
}
