{
#include<bits/stdc++.h>
using namespace std;
struct et
{
	char value;
	et* left, *right;
};
bool isOperator(char c)
{
	if (c == '+' || c == '-' ||
			c == '*' || c == '/' ||
			c == '^')
		return true;
	return false;
}
void inorder(et *t)
{
	if(t)
	{
		inorder(t->left);
		printf("%c ", t->value);
		inorder(t->right);
	}
}
et* newNode(int v)
{
	et *temp = new et;
	temp->left = temp->right = NULL;
	temp->value = v;
	return temp;
};
et* constructTree(char []);
int main()
{   
    int t;
    cin>>t;
    while(t--){
    char postfix[25];
	cin>>postfix;
	et* r = constructTree(postfix);
	inorder(r);
	cout<<endl;
}
return 0;
}
}
/*This is a function problem.You only need to complete the function given below*/
/*struct et
{
	char value;
	et* left, *right;
};*/
//function to construct expression tree
et* constructTree(char postfix[])
{
//code here
stack<string>st;
int l =(int)strlen(postfix);
et *root = NULL;
string temp="";
for(int i=0;i<l;++i){
    temp="";
    temp+=postfix[i];
    if(!isOperator(postfix[i])) st.push(temp);
    else{
        string t = st.top();st.pop();
        string p ="";
        if(!st.empty()) { p = st.top();st.pop();}
        else return NULL;
        string s =t+temp+p;
        st.push(s);
    }
}
string s= st.top();st.pop();
if(!st.empty()) return NULL;
et *tail = NULL;
for(int i=0;i<(int)s.size();++i){
    et *tak = (et*)malloc(sizeof(et));
    tak->value = s[i];
    tak->left=tak->right=NULL;
    if(!root){
        root = tak;
        tail= tak;
    }else{
        tail->left=tak;
        tail=tak;
    }
}
return root;


}
