{
#include<bits/stdc++.h>
using namespace std;
int countDistinctSubstring(string s);
int main()
{ios_base(sync)
 int t,l,i,j;
 int temp;
    cin>>t;
 while(t--){
 string s;
  cin>>s;
  cout<<countDistinctSubstring(s)<<endl;
 }
}

}
/*This is a function problem.You only need to complete the function given below*/
/*You are required to complete this method */
/*You are required to complete this method */

struct trie{
    bool leaf;
    unordered_map<char,trie*>M;
};

trie* create(){
    trie* temp = new trie;
    temp->leaf = false;
    return temp;
}

void insert(trie* &root,string s){
    if(root==nullptr) root = create();
    
    trie* cur = root;
    for(int i=0;i<(int)s.size();++i){
        if(cur->M.find(s[i])==cur->M.end()){
             cur->M[s[i]] = create();
        }
        cur = cur->M[s[i]];
    }
    cur->leaf = true;
    
}

void print(trie* root,int &cnt,string s){
    if(root->leaf == false){
        for(auto it = root->M.begin();it!=root->M.end();++it){
            pair<char,trie*>temp = *it;
            s+=temp.first; 
            print(temp.second,cnt,s);
            s=s.substr(0,(int)s.size()-1);
        }
        
    }else{
        ++cnt;
        root->leaf = false;
        print(root,cnt,s);
    }
}

int countDistinctSubstring(string s)
{
    trie* root;
    root = create();
    for(int i=0;i<(int)s.size();++i){
        for(int j=0;j<(int)s.size();++j){
            insert(root,s.substr(i,j-i+1));
        }
    }
    int cnt = 0;
    print(root,cnt,"");
    return cnt;
    
}
