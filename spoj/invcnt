#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef  pair<int,int>P;
typedef pair<int,pair<int,int> >P1;
typedef pair<pair<int,int>,pair<int,int> >P11;


#define rep(xx,uu,ee) for(xx=uu;xx<ee;++xx)
#define mm(xx) memset(xx,0,sizeof(xx))
#define F first
#define S second
#define SF second.first
#define SS second.second
#define FF first.first
#define FS first.second
#define pb push_back


#define scd(xx) scanf("%d",&xx)
#define scd2(xx,uu) scanf("%d%d",&xx,&uu)
#define debug2d(xx,rr,cc) for(int i=0;i<rr;++i) {for(int j=0;j<cc;++j) cout<<xx[i][j]<<" "; cout<<endl;}
#define debug1d(xx,rr) for(int i=0;i<rr;++i) cout<<xx[i]<<" ";
#define rep(xx,uu,ee) for(xx=uu;xx<ee;++xx)
#define rept(xx) for(int uu=0;uu<xx;++uu)

//  int dx[]={1,0,-1,0};int dy[]={0,1,0,-1};                           //4 directions
//  int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};      //8 directions
//  int dx[]={2,1,-1,-2,-2,-1,1,2}; int dy[]={1,2,2,1,-1,-2,-2,-1};       //knight's move
//  int dx[]={-1,-1,0,1,1,1,0}; int dy[]={-1,1,2,1,-1,-2};                //hexagonally move
// pos=lower_bound(v.begin(), v.end(), data) - v.begin();                  // binary search position(index =0)

#define SIZ 4000001
#define T int t;for(scanf("%d",&t);t--;)
#define mod 1000000007
#define scl(xx) scanf("%lld",&xx)
#define pra(xx) printf("%d ",xx)
#define prs(xx) printf("xx\n")
#define bs(XX,xx) binary_search(XX.begin(), XX.end(),xx)


//using BIT but it requires index 0..

void update(int pos,int n,int *BIT)
{
  for(;pos<=n;pos+=(pos&(-pos))) BIT[pos]+=1;

}
int query(int pos,int *BIT)
{
int sum=0;
for(;pos>0;pos-=pos&(-pos)) sum+=BIT[pos];
return sum;
}
int main()
{
int j;
T
{cout<<endl;
int i,n,x;
scd(n);
int A[n+5],B[n+5],C[n+5],BIT[n+5];
mm(BIT);
rep(i,0,n) {scd(A[i]);B[i]=A[i];}

//rep(i,0,n) cout<<B[i]<<" ";
sort(B,B+n);

rep(i,0,n) C[i]=lower_bound(B,B+n,A[i])-B+1;
//rep(i,0,n) cout<<C[i]<<" ";

ll invcnt=0;

for(i=n-1;i>=0;--i)
{
x=query(C[i],BIT);
invcnt+=x;
update(C[i],n,BIT);

}
cout<<invcnt<<endl;


}


    return 0;
}










/*
Goulou L'Mama

*/
