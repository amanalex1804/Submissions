#include<iostream>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <string>
#include <vector>
using namespace std;
 
#define rep(i,n) for(i=0;i<(n);i++)
#define min(a,b) (((a)<(b))?(a):(b))
#define MAXN 105
struct edge
{
 int a;
 int b;
 int cost;
};
struct node
{
 int level;
 int low;
 int noChildren;
 vector<int> ad;
}nd[17];
bool isArtic[17];
bool vrt[17];
vector<edge> ed;
int n;
void dfs(int x) {
 nd[x].low = nd[x].level;
vrt[x]=1;
 int i, y;
 rep(i, nd[x].ad.size()) {
 y = nd[x].ad[i];
 if( nd[y].level == -1) { //unvisited
 nd[y].level = nd[x].level + 1;
 nd[x].noChildren++;
 dfs(y);
 nd[x].low = min(nd[x].low, nd[y].low);
// if(nd[x].level==0 and nd[x].noChildren>1) isArtic[x]=1;
if(nd[y].low>nd[x].level) {
 isArtic[x] = 1;
 }
 }
 else if (nd[y].level < nd[x].level - 1) { //y's depth is lower than x's parent....so its a back edge
 nd[x].low = min(nd[x].low, nd[y].level);
 }
 }
 
/*if(nd[x].level == 0) { //root node
 if(nd[x].noChildren >= 2) isArtic[x] = 1;
 }*/
}
long long graph(int bit,int m)
{
 int cnt=0;
 for(int i=0;i<17;i++)
 nd[i].ad.clear(),nd[i].noChildren = 0,nd[i].low = nd[i].level = -1,isArtic[i]=0;
 
memset(vrt,0,sizeof(vrt));
 long long cst=0LL;
 for(int i=0;i<m;i++)
 {
 if(bit&1<<i)
 cst+=(long long int)(ed[i].cost),nd[ed[i].a-1].ad.push_back(ed[i].b-1),nd[ed[i].b-1].ad.push_back(ed[i].a-1),cnt++;
 }
 if(cnt>=n-1)
 {
 
nd[0].level=0;
 dfs(0);
 for(int i=0;i<n;i++)
 if(vrt[i]==0)
 return -1LL;
 
 int i=0;
 rep(i,n) if(isArtic[i])return -1LL;
 
 
 
 return cst;
 }
 else
 return -1LL;
}
int main()
{
 int m,u,v,c;
 int test=0;
 while(1)
 {
 test++;
 scanf("%d %d",&n,&m);
 if(n==m&&n==0)
 break;
 ed.clear();
 for(int i=0;i<m;i++)
 {scanf("%d %d %d",&u,&v,&c),ed.push_back((edge){u,v,c});}
 long long ct=1000000000000LL,t;
 int flag=0;
 for(int i=0;i<(1<<m);i++)
 {
 if((t=graph(i,m))!=-1LL)
 ct=min(ct,t),flag=1;
 }
 if(flag)
 cout<<"The minimal cost for test case "<<test<<" is "<<ct<<".\n";
 else
 cout<<"There is no reliable net possible for test case "<<test<<".\n";
 }
 return 0;
} 
