/* 

writings_in_which 

*/

#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;
typedef  pair<int,int>P;
typedef pair<int,pair<int,int> >P1;
typedef pair<pair<int,int>,pair<int,int> >P11;


#define rep(xx,uu,ee) for(xx=uu;xx<ee;++xx)
#define mm(xx) memset(xx,0,sizeof(xx))
#define F first
#define S second
#define SF second.first
#define SS second.second
#define FF first.first
#define FS first.second
#define pb push_back

#define SYNC ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define scd(xx) scanf("%d",&xx)

#define scl2(xx,uu) scanf("%lld%lld",&xx,&uu);
#define scd2(xx,uu) scanf("%d%d",&xx,&uu)
#define rep(xx,uu,ee) for(xx=uu;xx<ee;++xx)

//  int dx[]={1,0,-1,0};int dy[]={0,1,0,-1};                           //4 directions
//  int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};      //8 directions
//  int dx[]={2,1,-1,-2,-2,-1,1,2}; int dy[]={1,2,2,1,-1,-2,-2,-1};       //knight's move
//  int dx[]={-1,-1,0,1,1,1,0}; int dy[]={-1,1,2,1,-1,-2};                //hexagonally move
// pos=lower_bound(v.begin(), v.end(), data) - v.begin();                  // binary search position(index =0)

#define SIZ 4000001
#define SIZ1 1100000
#define INF 999999

#define T int t;for(scanf("%d",&t);t--;)
#define mod 1000000007
#define scl(xx) scanf("%lld",&xx)
#define pra(xx) printf("%d ",xx)
#define prs(xx) printf("xx\n")
#define bs(XX,xx) binary_search(XX.begin(), XX.end(),xx)

ll prim[SIZ1],ans[SIZ1];
void sieve()
{
	ll i,j;
	
	for(i=4;i<SIZ1;i+=2) prim[i]=1;
	for(i=3;i<SIZ1;i+=2)
	{
		for(j=i*i;j<SIZ1;j+=2*i) prim[j]=1;
	}
	
}

void harshad()
{
	ll val,i,temp;
	
	fill_n(ans,SIZ1,1);
	ans[0]=0;
	for(i=1;i<=1000000;++i)
	{
		if(ans[i]==1 and i!=1)
		{
			if(prim[i]) ans[i]=0;
		}
		val=i;
		temp=i;
		while(temp)
		{
			val+=temp%10;
			temp/=10;
		}
		
		ans[val]=0;
		
	}
	ans[1]=0;
	for(i=1;i<=1000000;++i)
	ans[i]+=ans[i-1];
	

	
}
int main()
{
ll l,r;

sieve();

harshad();
T{
scl2(l,r);
if(!l) cout<<ans[r]<<endl;
else cout<<ans[r]-ans[l-1]<<endl;



}







    return 0;
}











/*
if you're going to go broke..
go big !

*/
