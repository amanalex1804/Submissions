#include<bits/stdc++.h>1
using namespace std;
typedef long int ll;

typedef struct nod{
	ll ar[2];
	
};
nod seg[400005];
ll A[100005];
void build(int node,int st,int en){
	
	if(st==en){
		seg[node].ar[0]=A[st];
		seg[node].ar[1]=0;		
	}
	else{
		int mid=(st+en)/2;
		build((2*node),st,mid);
		build((2*node)+1,mid+1,en);
		
		int i=0,j=0,k=0;
		while(i<2 and j<2 and k<2){
			
			if(seg[(2*node)].ar[j]>=seg[(2*node)+1].ar[k]) { 	seg[node].ar[i]=seg[(2*node)].ar[j]; ++j;		}
			else { 	seg[node].ar[i]=seg[(2*node)+1].ar[k]; ++k;			}
			++i;
		}
	}
	
}

void upd(int node,int st,int en,int idx,ll val){
	
	if(st>idx or idx>en) return ;
	
	if(st==en and st==idx) { seg[node].ar[0]=val;return;	}
	if(st<=idx and idx<=en){
		int mid=(st+en)/2;
		upd((2*node),st,mid,idx,val);
		upd((2*node)+1,mid+1,en,idx,val);
		
		int i=0,j=0,k=0;
		while(i<2 and j<2 and k<2){
			
			if(seg[(2*node)].ar[j]>=seg[(2*node)+1].ar[k]) { 	seg[node].ar[i]=seg[(2*node)].ar[j]; ++j;		}
			else { 	seg[node].ar[i]=seg[(2*node)+1].ar[k]; ++k;			}
			++i;
		}
		
	}
	
}
nod qry(int node,int st,int en,int l,int r){
	
	if(r<st or en<l or en<st) {nod rr;rr.ar[0]=0; rr.ar[1]=0; return rr;}
	if(l<=st and en<=r) return seg[node];
	int mid=(st+en)/2;
	nod x=qry((2*node),st,mid,l,r);
	nod y=qry((2*node)+1,mid+1,en,l,r);
	nod z;
	int i=0,j=0,k=0;
	while(i<2 and j<2 and k<2){
		if(x.ar[j]>=y.ar[k]) { z.ar[i]=x.ar[j]; ++j;		}
		else { z.ar[i]=y.ar[k]; ++k;		}
		
		++i;
	}
	return z;
	
}

int main(){
	
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	int n; cin>>n;
	for(int i=1;i<=n;++i) cin>>A[i];
	build(1,1,n);
	
	int q; cin>>q;
	while(q--){
		char ch; cin>>ch;
		if(ch=='Q'){
			int l,r; cin>>l>>r;
			nod temp=qry(1,1,n,l,r);
			cout<<(ll)temp.ar[0]+temp.ar[1]<<"\n";
		}
		else{
			int idx;ll val;
			cin>>idx>>val;
	
			upd(1,1,n,idx,val);
		}
		
	}

	
	
	return 0;
}
