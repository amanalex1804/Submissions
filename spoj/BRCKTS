#include<bits/stdc++.h>
using namespace std;
#define sz 30005

typedef struct nod{
	int left=0,right=0;
}nod;

nod seg[4*sz];
string s;

void build(int node,int st,int en){
	if(st==en) {
		if(s[st]=='(') { seg[node].left=1; seg[node].right=0;		}
		else { 	seg[node].left=0; seg[node].right=1;	}
	}
	else{
		int mid=(st+en)/2;
		build((2*node)+1,st,mid);
		build((2*node)+2,mid+1,en);
		if(seg[(2*node)+1].left>=seg[(2*node)+2].right) { seg[node].left=abs(seg[(2*node)+1].left-seg[(2*node)+2].right)+seg[(2*node)+2].left; seg[node].right=seg[(2*node)+1].right;	}
		else { 	seg[node].right=abs(seg[(2*node)+1].left-seg[(2*node)+2].right)+seg[(2*node)+1].right; seg[node].left=seg[(2*node)+2].left;	}
	}
}

void update(int node,int st,int en,int pt){
	
	if(st>pt or pt>en) return;
	if(st==pt and pt==en) {
		
		if(seg[node].left>0) { seg[node].right=1; seg[node].left=0;		}
		else { 	seg[node].right=0; seg[node].left=1;		}
		
		return ;
	}
	int mid=(st+en)/2;
	update((2*node)+1,st,mid,pt);
	update((2*node)+2,mid+1,en,pt);
	if(seg[(2*node)+1].left>=seg[(2*node)+2].right) { seg[node].left=abs(seg[(2*node)+1].left-seg[(2*node)+2].right)+seg[(2*node)+2].left; seg[node].right=seg[(2*node)+1].right;	}
	else { 	seg[node].right=abs(seg[(2*node)+1].left-seg[(2*node)+2].right)+seg[(2*node)+1].right; seg[node].left=seg[(2*node)+2].left;	}
}
int main(){
	
	ios_base::sync_with_stdio(false);
	 cin.tie(NULL);
	
	int t=10,l;
	
	for(int test=1;test<=t;++test){
		cin>>l;
		cin>>s;
		
		build(0,0,l-1);
		int q,x;
	
		cin>>q;
		cout<<"Test "<<test<<":\n";
		while(q--){
			cin>>x;
			if(!x) {
				if(seg[0].left==0 and seg[0].right==0) cout<<"YES\n";
				else cout<<"NO\n";
			}
			else{
		     update(0,0,l-1,x-1);
			
		}
	}
}
	return 0;
}
