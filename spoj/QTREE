#include<cstdio>
#include<vector>
#include<math.h>
using namespace std;
#define sz 10010

int no=0;  //count number of chains existing
int head[sz]; // head of each chain
int ind[sz];  // chain no. of a node
int pos[sz];   // position of a node in its chain
int csize[sz];  //size of a particular chain
int sub[sz],par[sz][20],lv[sz];

vector<int>idx[sz],costs[sz],gr[sz];
int ptr=0; int inbase[sz],inpos[sz],side[sz];
int seg[4*sz],qt[4*sz];

void build(int node,int s,int e){
	if(s==e) {
		seg[node]=inbase[s];
		return;
	}
	int mid=(s+e)/2;
	build(2*node,s,mid);
	build(2*node+1,mid+1,e);
	seg[node]=(seg[2*node]>seg[2*node+1])?seg[2*node]:seg[2*node+1];
//	seg[node]=max(seg[2*node],seg[2*node+1]);
}

void upd(int node,int s,int e,int ind,int val){
	
	if(s==e){
		seg[node]=val;
		return;
	}
	int mid=(s+e)>>1;
	if(ind<=mid) upd(2*node,s,mid,ind,val);
	else upd(2*node+1,mid+1,e,ind,val);
	seg[node]=(seg[2*node]>seg[2*node+1])?seg[2*node]:seg[2*node+1];
	//seg[node]=max(seg[2*node],seg[2*node+1]);
	
}

void segqry(int node,int s,int e,int l,int r){
	
	if(r<s or e<l) {qt[node]=-1;return ;}
	if(l<=s and e<=r) {qt[node]=seg[node]; return ;}
	int mid=(s+e)>>1;
	segqry(2*node,s,mid,l,r);
	segqry(2*node+1,mid+1,e,l,r);
	qt[node]=(qt[2*node]>qt[2*node+1])?qt[2*node]:qt[2*node+1];
	//return max(segqry(2*node,s,mid,l,r),segqry(2*node+1,mid+1,e,l,r));
}

int LCA(int u,int v){
	
	if(lv[u]>lv[v]) swap(u,v);
	int diff=abs(lv[u]-lv[v]);
	
	for(int i=13;i>=0;--i)
	 if((1<<i)&diff) v=par[v][i];
	 
	 if(u==v) return v;
	 
	 for(int i=13;i>=0;--i){
	 	if(par[v][i]!=par[u][i]){
	 		v=par[v][i];
	 		u=par[u][i];
		 }
	 }
	 return par[u][0];
	
}

void dfs(int src,int parent){
	sub[src]=1;
	par[src][0]=parent;
	lv[src]=lv[parent]+1;
	int szi=(int)gr[src].size();
	for(int i=0;i<szi;++i){
		int ver=gr[src][i];
		if(ver==parent) continue;
		side[idx[src][i]]=ver;		
		dfs(ver,src);
	}
	sub[parent]+=sub[src];
}

void hld(int src,long int cost){
	if(head[no]==-1) head[no]=src; 
	ind[src]=no;
	pos[src]=csize[no];
	csize[no]++;
	
	inpos[src]=ptr;
	inbase[ptr++]=cost;
	
	int ind=-1,mx=0; // if ind=0  then index problem in subtree
	int szi=(int)gr[src].size();
	for(int i=0;i<szi;++i){
		int ver=gr[src][i];
		if(ver==par[src][0]) continue;
		if(sub[ver]>=mx){
			mx=sub[ver];
			ind=i;
		}
	}
	
	if(ind>=0) hld(gr[src][ind],costs[src][ind]);  //special child i.e subtree is mazmum
	szi=(int)gr[src].size();
	for(int i=0;i<szi;++i){
		int ver=gr[src][i];
		if(ver==par[src][0] or i==ind) continue;
		++no;
		hld(ver,costs[src][i]);
	}
	
     
}

int up_qry(int u,int v){
	
	if(u==v) return 0;
	int uchain=ind[u],vchain=ind[v];
	int ans=-1;
	while(1){
		uchain=ind[u];
		if(uchain==vchain){
			if(u==v) break;
			segqry(1,1,ptr-1,inpos[v],inpos[u]);    //
			if(qt[1]>ans) ans=qt[1];
			break;
		}
		segqry(1,1,ptr-1,inpos[head[uchain]],inpos[u]); // chkpt
		if(qt[1]>ans) ans=qt[1];
	
		u=head[uchain];
		u=par[u][0];
		
	}
	return ans;
	
}
void qry(int u,int v){
	int lca=LCA(u,v);
	//<<" for --> "<<u<<" "<<v<<endl;
	int r1=up_qry(u,lca);
	int r2=up_qry(v,lca);
	//<<r1<<" "<<r2<<endl;
	if(r1>r2) printf("%d\n",r1);
	else printf("%d\n",r2);
	//return max(up_qry(u,lca),up_qry(v,lca));
}

void fn(int i,long int cost){
	int ver=side[i];
	int p=inpos[ver];
	upd(1,1,ptr-1,p,cost);
}


int main(){

	int t;scanf("%d",&t);
	while(t--){
		int n;scanf("%d",&n);
		no=0;
		for(int i=0;i<n+5;++i){
			head[i]=-1;
			gr[i].clear();
			idx[i].clear();
			csize[i]=0;
			for(int j=0;j<=13;++j) par[i][j]=-1;
		}
		
		
		for(int i=1,a,b,c;i<n;++i){
			scanf("%d%d%d",&a,&b,&c);
			
			gr[a].push_back(b);
			gr[b].push_back(a);
			costs[a].push_back(c);
			costs[b].push_back(c);
			idx[a].push_back(i-1);
			idx[b].push_back(i-1);
		}
		ptr=1;
		lv[0]=0;
		dfs(1,0);
		hld(1,0);
		
		for(int i=1;i<=n;++i)
		for(int j=1;j<=13;++j)
		if(par[i][j-1]!=-1) par[i][j]=par[par[i][j-1]][j-1];
		
		build(1,1,ptr-1);
	
		int q;
		while(1){
			char temp[10];scanf("%s",temp);
			if(temp[0]=='C'){
				
		        int x,c;scanf("%d%d",&x,&c);
		        fn(x-1,c);
			}
			else if(temp[0]=='Q'){
			
				int x,y;scanf("%d%d",&x,&y);
				qry(x,y);
				//printf("%d\n",ret);
			}
			else break;
		}
		
	}
	
	
	
	return 0;
}
